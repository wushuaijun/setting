<templateSet group="Custom">
  <template name="getb" value="private $NAME$ get$NAME$() {&#10;  return ServiceFactory.getService($NAME$.class);&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="service" value="import com.searly.epiphany.mini.entity.OperateInfo;&#10;import com.searly.aroma.commons.biz.query.QueryDefinition;&#10;import com.searly.aroma.commons.biz.query.QueryResult;&#10;import com.searly.epiphany.mini.exception.BizServiceException;&#10;&#10;/**&#10; * @author wushuaijun&#10; * @since 1.0&#10; */&#10;public interface $NAME$Service {&#10;&#10;  QueryResult&lt;$NAME$&gt; query(String tenant, QueryDefinition qd, String... parts);&#10;&#10;  $NAME$ get(String tenant, String id, String... parts);&#10;&#10;  $NAME$ safeGet(String tenant, String id, String... parts) throws BizServiceException;&#10;&#10;  $NAME$ create(String tenant, Create$NAME$Data request, OperateInfo operateInfo) throws BizServiceException;&#10;&#10;  $NAME$ modify(String tenant, Modify$NAME$Data request, OperateInfo operateInfo) throws BizServiceException;&#10;&#10;  $NAME$ sync(String tenant, $NAME$ $NAME_LOWERS$) throws BizServiceException;&#10;&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME_LOWERS" expression="decapitalize(NAME) " defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="rsService" value="&#10;import com.searly.aroma.commons.biz.query.QueryResult;&#10;import com.searly.epiphany.mini.exception.BizServiceException;&#10;import com.searly.epiphany.mini.http.Response;&#10;import com.searly.epiphany.mini.http.request.GetRequest;&#10;import com.searly.epiphany.mini.http.request.QueryRequest;&#10;import io.swagger.annotations.Api;&#10;import io.swagger.annotations.ApiOperation;&#10;import io.swagger.annotations.ApiParam;&#10;import org.springframework.web.bind.annotation.PathVariable;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.RequestBody;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;&#10;/**&#10; * @author wushuaijun&#10; * @since 1.0&#10; */&#10;@Api(tags = RS$NAME$Service.TAG)&#10;@RequestMapping(&quot;/v1/{tenant}/$NAME$&quot;)&#10;public interface RS$NAME$Service {&#10;&#10;  String TAG = &quot;---&quot;;&#10;&#10;  @ApiOperation(value = &quot;分页查询&quot;)&#10;  @PostMapping(value = &quot;/query&quot;)&#10;  Response&lt;QueryResult&lt;$NAME$&gt;&gt; query(&#10;      @ApiParam(value = &quot;租户标识&quot;) @PathVariable(&quot;tenant&quot;) String tenant,&#10;      @ApiParam(value = &quot;请求信息&quot;) @RequestBody QueryRequest request) throws BizServiceException;&#10;&#10;  @ApiOperation(value = &quot;获取&quot;)&#10;  @PostMapping(value = &quot;/get&quot;)&#10;  Response&lt;$NAME$&gt; get(&#10;      @ApiParam(value = &quot;租户标识&quot;) @PathVariable(&quot;tenant&quot;) String tenant,&#10;      @ApiParam(value = &quot;请求信息&quot;) @RequestBody GetRequest request) throws BizServiceException;&#10;&#10;  @ApiOperation(value = &quot;创建&quot;)&#10;  @PostMapping(value = &quot;/create&quot;)&#10;  Response&lt;$NAME$&gt; create(&#10;      @ApiParam(value = &quot;租户标识&quot;) @PathVariable(&quot;tenant&quot;) String tenant,&#10;      @ApiParam(value = &quot;请求信息&quot;) @RequestBody Create$NAME$Data request) throws BizServiceException;&#10;&#10;  @ApiOperation(value = &quot;修改&quot;)&#10;  @PostMapping(value = &quot;/modify&quot;)&#10;  Response&lt;$NAME$&gt; modify(&#10;      @ApiParam(value = &quot;租户标识&quot;) @PathVariable(&quot;tenant&quot;) String tenant,&#10;      @ApiParam(value = &quot;请求信息&quot;) @RequestBody Modify$NAME$Data request) throws BizServiceException;&#10;&#10;  @ApiOperation(value = &quot;同步&quot;)&#10;  @PostMapping(value = &quot;/sync&quot;)&#10;  Response&lt;$NAME$&gt; sync(&#10;      @ApiParam(value = &quot;租户标识&quot;) @PathVariable(&quot;tenant&quot;) String tenant,&#10;      @ApiParam(value = &quot;请求信息&quot;) @RequestBody $NAME$ $NAME_LOWER$) throws BizServiceException;&#10;&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME_LOWER" expression="decapitalize(NAME) " defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="serviceImpl" value="&#10;import com.google.common.base.Objects;&#10;import com.searly.aroma.commons.biz.query.Cop;&#10;import com.searly.aroma.commons.biz.query.QueryDefinition;&#10;import com.searly.aroma.commons.biz.query.QueryResult;&#10;import com.searly.aroma.commons.lang.Assert;&#10;import com.searly.epiphany.biz.domain.VersionUtil;&#10;import com.searly.epiphany.biz.i18n.R;&#10;import com.searly.epiphany.biz.lock.DistributedLocker;&#10;import com.searly.epiphany.biz.lock.LockContent;&#10;import com.searly.epiphany.biz.lock.LockPolicy;&#10;import com.searly.epiphany.biz.log.LogActions;&#10;import com.searly.epiphany.biz.spring.EventDisposablePublisher;&#10;import com.searly.epiphany.biz.spring.ServiceFactory;&#10;import com.searly.epiphany.mini.datamodel.RefBill;&#10;import com.searly.epiphany.mini.entity.ICN;&#10;import com.searly.epiphany.mini.entity.LogEntity;&#10;import com.searly.epiphany.mini.entity.OperateInfo;&#10;import com.searly.epiphany.mini.exception.BizServiceException;&#10;import com.searly.epiphany.mini.http.request.QueryRequest;&#10;import com.searly.epiphany.mini.http.request.QueryRequestBuilder;&#10;import com.searly.epiphany.template.domain.log.LogAdapter;&#10;import com.searly.epiphany.template.domain.log.LogAdapterBuilder;&#10;import com.searly.epiphany.template.domain.sequence.SequenceBuilder;&#10;import com.searly.epiphany.template.iid.IidUtil;&#10;import com.searly.epiphany.template.infrastructure.config.TX;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.apache.commons.collections4.CollectionUtils;&#10;import org.apache.commons.lang.ArrayUtils;&#10;import org.apache.commons.lang.BooleanUtils;&#10;import org.apache.commons.lang.StringUtils;&#10;import org.springframework.beans.BeanUtils;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.ArrayList;&#10;import java.util.Arrays;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import static com.searly.epiphany.biz.i18n.LocaleMessage.$t;&#10;&#10;/**&#10; * @author wushuaijun&#10; * @since 1.0&#10; */&#10;@Slf4j&#10;@Service($NAME$ServiceImpl.BEAN_ID)&#10;public class $NAME$ServiceImpl implements $NAME$Service {&#10;  public static final String BEAN_ID = &quot;onlean.$NAME$ServiceImpl&quot;;&#10;  private static final LogAdapter logAdapter = LogAdapterBuilder&#10;      .of(LogEntity.class, $NAME$LogSchema.class)&#10;      .name($NAME$.class.getSimpleName())&#10;      .build();&#10;  &#10;  @Override&#10;  public QueryResult&lt;$NAME$&gt; query(String tenant, QueryDefinition qd, String... parts) {&#10;    return get$NAME$Repository().query(tenant, qd, parts);&#10;  }&#10;&#10;  @Override&#10;  public $NAME$ get(String tenant, String id, String... parts) {&#10;    return get$NAME$Repository().get(tenant, id, parts);&#10;  }&#10;&#10;  @Override&#10;  public $NAME$ safeGet(String tenant, String id, String... parts) throws BizServiceException {&#10;    $NAME$ account = get(tenant, id, parts);&#10;    if (account == null) {&#10;      throw new BizServiceException($t(R.NOT_EXISTS, $t($NAME$.class.getSimpleName()), id));&#10;    }&#10;    return account;&#10;  }&#10;&#10;  @TX&#10;  @Override&#10;  public $NAME$ create(String tenant, Create$NAME$Data request, OperateInfo operateInfo) throws BizServiceException {&#10;    $NAME$ target = new $NAME$();&#10;    BeanUtils.copyProperties(request, target);&#10;    target.setTenant(tenant);&#10;    target.setId(IidUtil.newId());&#10;&#10;    target.onCreated(operateInfo);&#10;    get$NAME$Repository().insert(tenant, target, $NAME$.ALL_PARTS);&#10;    EventDisposablePublisher.publishEvent(new $NAME$CreateEvent(tenant, target));&#10;    logAdapter.log(target, LogActions.CREATE, operateInfo);&#10;    return target;&#10;  }&#10;&#10;  @TX&#10;  @Override&#10;  public $NAME$ modify(String tenant, Modify$NAME$Data modifyData, OperateInfo operateInfo) throws BizServiceException {&#10;    $NAME$ target = safeGet(tenant, modifyData.getId());&#10;    &#10;    BeanUtils.copyProperties(modifyData, target);&#10;    target.onModified(operateInfo);&#10;    &#10;    get$NAME$Repository().update(tenant, target, false, $NAME$.ALL_PARTS);&#10;    EventDisposablePublisher.publishEvent(new $NAME$ModifyEvent(tenant, target));&#10;    logAdapter.log(target, LogActions.MODIFY, operateInfo);&#10;    return target;&#10;  }&#10;&#10;  @TX&#10;  @Override&#10;  public $NAME$ sync(String tenant, $NAME$ $NAME_LOWER$) throws BizServiceException {&#10;    Assert.notBlank($NAME_LOWER$.getId());&#10;    try (LockContent ignore = getDistributedLocker().lockException(&#10;        tenant, $NAME$.class.getSimpleName(), $NAME_LOWER$.getId())) {&#10;      $NAME$ source = get(tenant, $NAME_LOWER$.getId());&#10;&#10;      $NAME$ target = source != null ? source : new $NAME$();&#10;      BeanUtils.copyProperties($NAME_LOWER$, target);&#10;      target.onModified($NAME_LOWER$.getLastModifyInfo());&#10;      target.getLastModifyInfo().setTime(new Date());&#10;      target.setSyncState($NAME$.SyncState.success.name());&#10;      if (source == null) {&#10;        get$NAME$Repository().insert(tenant, target, $NAME$.ALL_PARTS);&#10;      } else {&#10;        get$NAME$Repository().update(tenant, target, false, $NAME$.ALL_PARTS);&#10;      }&#10;      return source;&#10;    }&#10;  }&#10;&#10;  public LockContent lock(String... lockIdParams) throws BizServiceException {&#10;    StringBuilder builder = new StringBuilder();&#10;    if (ArrayUtils.isNotEmpty(lockIdParams)) {&#10;      for (String lockParam : lockIdParams) {&#10;        builder.append(lockParam);&#10;      }&#10;    }&#10;    return getDistributedLocker().lock(builder.toString(), LockPolicy.exception);&#10;  }&#10;&#10;  private DistributedLocker getDistributedLocker() {&#10;    return ServiceFactory.getService(DistributedLocker.class);&#10;  }&#10;&#10;  private $NAME$Repository get$NAME$Repository() {&#10;    return ServiceFactory.getService($NAME$Repository.class);&#10;  }&#10;&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME_LOWER" expression="decapitalize(NAME) " defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="registory" value="&#10;import com.searly.aroma.commons.biz.query.QueryDefinition;&#10;import com.searly.aroma.commons.biz.query.QueryResult;&#10;import com.searly.epiphany.mini.entity.IdName;&#10;import com.searly.epiphany.mini.entity.OperateInfo;&#10;import com.searly.epiphany.template.domain.repository.CrudRepository;&#10;import com.searly.onlean.application.keyaccount.command.UpdateCreditLine;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * @author wushuaijun&#10; * @since 1.0&#10; */&#10;public interface $NAME$Repository extends CrudRepository&lt;$NAME$&gt; {&#10;&#10;  List&lt;$NAME$&gt; query4Sync(String tenant, String... fetchParts);&#10;&#10;  void updateSyncState(String tenant, String id, String syncState);&#10;&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="registoryImpl" value="import com.alibaba.excel.util.CollectionUtils;&#10;import com.searly.aroma.commons.jdbc.sql.Predicates;&#10;import com.searly.aroma.commons.jdbc.sql.SelectBuilder;&#10;import com.searly.aroma.commons.jdbc.sql.SelectStatement;&#10;import com.searly.epiphany.template.domain.repository.CrudRepositoryImpl;&#10;import com.searly.epiphany.template.domain.repository.CrudRepositorySchema;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.Arrays;&#10;import java.util.Collections;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.stream.Collectors;&#10;&#10;@Repository&#10;@CrudRepositorySchema($NAME$Schema.class)&#10;public class $NAME$RepositoryImpl extends CrudRepositoryImpl&lt;$NAME$&gt; implements $NAME$Repository {&#10;&#10;&#10;  @Override&#10;  public List&lt;$NAME$&gt; query4Sync(String tenant, String... fetchParts) {&#10;    SelectStatement select = new SelectBuilder()&#10;        .from($NAME$Schema.TABLE_NAME)&#10;        .where(Predicates.equals($NAME$Schema.TENANT, tenant))&#10;        .where(Predicates.in2($NAME$Schema.SYNC_STATE, // 未同步、同步失败&#10;            $NAME$.SyncState.yet.name(), $NAME$.SyncState.failed.name()))&#10;        .limit(500)&#10;        .orderBy($NAME$Schema.LAST_MODIFY_INFO_TIME)&#10;        .build();&#10;    List&lt;$NAME$&gt; list = jdbcTemplate.query(select, $NAME$Schema.R.MAPPER);&#10;    fetchParts(tenant, list, fetchParts);&#10;    return list;&#10;  }&#10;&#10;  @Override&#10;  public void updateSyncState(String tenant, String id, String syncState) {&#10;    UpdateStatement update = new UpdateBuilder()&#10;        .table($NAME$Schema.TABLE_NAME)&#10;        .addValue($NAME$Schema.SYNC_STATE, syncState)&#10;        .where(Predicates.equals($NAME$Schema.ID, id))&#10;        .where(Predicates.equals($NAME$Schema.TENANT, tenant))&#10;        .build();&#10;    jdbcTemplate.update(update);&#10;  }&#10;&#10;  @Override&#10;  public void fetchParts(String tenant, List&lt;$NAME$&gt; list, String... parts) {&#10;    List&lt;String&gt; fetchParts = parts == null ? Collections.emptyList() : Arrays.asList(parts);&#10;    if (CollectionUtils.isEmpty(list) || CollectionUtils.isEmpty(fetchParts)) {&#10;      return;&#10;    }&#10;    Map&lt;String, $NAME$&gt; entityMap = list.stream().collect(Collectors.toMap($NAME$::getId, o -&gt; o));&#10;  }&#10;&#10;  @Override&#10;  protected void deleteParts($NAME$ entity, String... parts) {&#10;    List&lt;String&gt; fetchParts = parts == null ? Collections.emptyList() : Arrays.asList(parts);&#10;    if (CollectionUtils.isEmpty(fetchParts)) {&#10;      return;&#10;    }&#10;  }&#10;&#10;  @Override&#10;  protected void insertParts($NAME$ entity, String... parts) {&#10;    List&lt;String&gt; fetchParts = parts == null ? Collections.emptyList() : Arrays.asList(parts);&#10;    if (CollectionUtils.isEmpty(fetchParts)) {&#10;      return;&#10;    }&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="schema" value="&#10;import com.searly.aroma.commons.biz.query.Cop;&#10;import com.searly.aroma.commons.jdbc.annotation.MapToEntity;&#10;import com.searly.aroma.commons.jdbc.annotation.SchemaMeta;&#10;import com.searly.aroma.commons.jdbc.qd.QueryProcessor;&#10;import com.searly.aroma.commons.jdbc.qd.QueryProcessorBuilder;&#10;import com.searly.aroma.commons.jdbc.temapper.TEMapper;&#10;import com.searly.aroma.commons.jdbc.temapper.TEMapperBuilder;&#10;import com.searly.devops.ebt.annotation.Column;&#10;import com.searly.devops.ebt.annotation.Index;&#10;import com.searly.devops.ebt.annotation.Table;&#10;import com.searly.epiphany.biz.jdbc.entity.Schemas;&#10;import com.searly.epiphany.mini.constant.LengthConst;&#10;&#10;/**&#10; * @author wushuaijun&#10; * @since 1.0&#10; */&#10;@SchemaMeta&#10;@MapToEntity($NAME$.class)&#10;@Table(name = $NAME$Schema.TABLE_NAME, caption = &quot;$TABLE_NAME$&quot;, indexes = {&#10;    @Index(name = &quot;idx_$NAME_LOW_CAMEL$_1&quot;, columnNames = {$NAME$Schema.LAST_MODIFY_INFO_TIME}),&#10;})&#10;public class $NAME$Schema extends Schemas.OrgStandardEntity {&#10;&#10;  public static class R {&#10;    public static final TEMapper&lt;$NAME$&gt; MAPPER = TEMapperBuilder&#10;        .of($NAME$.class, $NAME$Schema.class)&#10;        .primaryKey($NAME$Schema.ID)&#10;        .build();&#10;&#10;    public static final QueryProcessor QUERY_PROCESSOR =&#10;        new QueryProcessorBuilder($NAME$.class, $NAME$Schema.class)&#10;            .build();&#10;  }&#10;&#10;  public static final String TABLE_NAME = &quot;$TABLE_LOWER_NAME$&quot;;&#10;&#10;  public static final String TABLE_ALIAS = &quot;$TABLE_ALIAS$&quot;;&#10;&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TABLE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME_LOW_CAMEL" expression="decapitalize(toCamelCase(NAME)) " defaultValue="" alwaysStopAt="true" />
    <variable name="TABLE_LOWER_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TABLE_ALIAS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="ctrl" value="&#10;import com.searly.aroma.commons.biz.query.QueryDefinition;&#10;import com.searly.aroma.commons.biz.query.QueryResult;&#10;import com.searly.epiphany.biz.access.AccessContext;&#10;import com.searly.epiphany.biz.jdbc.utils.QueryDefinitionBuilder;&#10;import com.searly.epiphany.biz.logaspect.ApiAspectLog;&#10;import com.searly.epiphany.biz.spring.ServiceFactory;&#10;import com.searly.epiphany.mini.exception.BizServiceException;&#10;import com.searly.epiphany.mini.http.Response;&#10;import com.searly.epiphany.mini.http.request.GetRequest;&#10;import com.searly.epiphany.mini.http.request.QueryRequest;&#10;&#10;/**&#10; * @author wushuaijun&#10; * @since 1.0&#10; */&#10;@ApiAspectLog&#10;@RestController&#10;public class $NAME$Controller implements RS$NAME$Service {&#10;&#10;  private static final QueryDefinitionBuilder QD_BUILDER = new QueryDefinitionBuilder($NAME$.Queries.class);&#10;&#10;&#10;  @Override&#10;  public Response&lt;QueryResult&lt;$NAME$&gt;&gt; query(String tenant, QueryRequest request) throws BizServiceException {&#10;    QueryDefinition qd = QD_BUILDER.build(request);&#10;    QueryResult&lt;$NAME$&gt; result = get$NAME$Service().query(tenant, qd, request.toParts());&#10;    return Response.success(result);&#10;  }&#10;&#10;&#10;  @Override&#10;  public Response&lt;$NAME$&gt; get(String tenant, GetRequest request) throws BizServiceException {&#10;    $NAME$ $NAME_LOWER$ = get$NAME$Service().get(tenant, request.getId(), request.toParts());&#10;    return Response.success($NAME_LOWER$);&#10;  }&#10;&#10;  @Override&#10;  public Response&lt;$NAME$&gt; create(String tenant, Create$NAME$Data request) throws BizServiceException {&#10;    $NAME$ $NAME_LOWER$ = get$NAME$Service().create(tenant, request, AccessContext.getOperateInfo());&#10;    return Response.success($NAME_LOWER$);&#10;  }&#10;&#10;  @Override&#10;  public Response&lt;$NAME$&gt; modify(String tenant, Modify$NAME$Data request) throws BizServiceException {&#10;    $NAME$ $NAME_LOWER$ = get$NAME$Service().modify(tenant, request, AccessContext.getOperateInfo());&#10;    return Response.success($NAME_LOWER$);&#10;  }&#10;&#10;  @Override&#10;  public Response&lt;$NAME$&gt; sync(String tenant, $NAME$ request) throws BizServiceException {&#10;    $NAME$ $NAME_LOWER$ = get$NAME$Service().sync(tenant, request);&#10;    return Response.success($NAME_LOWER$);&#10;&#10;  }&#10;  protected $NAME$Service get$NAME$Service() {&#10;    return ServiceFactory.getService($NAME$Service.class);&#10;  }&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME_LOWER" expression="decapitalize(NAME) " defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
</templateSet>